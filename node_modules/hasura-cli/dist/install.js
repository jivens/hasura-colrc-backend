"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
const chalk_1 = __importDefault(require("chalk"));
const asset_1 = require("./asset");
const { version } = require('../package.json');
function versionFromPackageJson() {
    return version;
}
exports.versionFromPackageJson = versionFromPackageJson;
function tagFromVersion(version) {
    return `v${version}`;
}
exports.tagFromVersion = tagFromVersion;
exports.defaultInstallOptions = {
    destDir: process.env.HASURA_CLI_DEST_DIR || '.',
    fileName: process.env.HASURA_CLI_DEST_FILENAME || 'hasura',
    dest() {
        return path_1.default.resolve(this.destDir, this.fileName);
    },
};
function install({ version = versionFromPackageJson(), destDir = exports.defaultInstallOptions.destDir, fileName = exports.defaultInstallOptions.fileName, platform = process.platform, verbose = false, } = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        const tag = tagFromVersion(version);
        const url = yield asset_1.getUrl(tag);
        const log = (msg) => {
            if (verbose) {
                console.log(msg);
            }
        };
        log(chalk_1.default `
{bold.bgGreen.black hasura-cli}@{green ${versionFromPackageJson()}}
{blue Downloading} {bold Hasura CLI binary} {green ${tag}} from {bold ${url}}
`);
        const adjustedFileName = platform === 'win32' && !fileName.endsWith('.exe')
            ? `${fileName}.exe`
            : fileName;
        const dest = yield asset_1.download({
            url,
            destDir,
            fileName: adjustedFileName,
        });
        if (platform === 'win32') {
            fs_1.default.unlinkSync(path_1.default.resolve(destDir, 'hasura'));
        }
        log(chalk_1.default `
{bold.bgGreen.black hasura-cli}@{green ${versionFromPackageJson()}}
{green Installed!} {bold Hasura CLI binary} {green ${tag}} is installed to {bold ${dest}}
`);
        return dest;
    });
}
exports.install = install;
